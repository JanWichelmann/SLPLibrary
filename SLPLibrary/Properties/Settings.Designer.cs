//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.1
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------




//INSTANT C# NOTE: Formerly VB project-level imports:
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.Xml.Linq;

namespace SLPLoader
{
	namespace Properties
	{

		[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute(), global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0"), global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		internal sealed partial class Settings : System.Configuration.ApplicationSettingsBase
		{

			private static Settings defaultInstance = (Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings()));

#region Funktion zum automatischen Speichern von My.Settings
//INSTANT C# TODO TASK: C# compiler constants cannot be set to explicit values:
//#if _MyType == "WindowsForms"
//	Private Shared addedHandler As Boolean
//
//	Private Shared addedHandlerLockObject As new Object
//
//	<global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)> Private Shared Sub AutoSaveSettings(ByVal sender As System.Object, ByVal e As System.EventArgs)
//		If My.Application.SaveMySettingsOnExit Then
//			My.Settings.Save()
//		End If
//	End Sub
//#endif
#endregion

			public static Settings Default
			{
				get
				{

//INSTANT C# TODO TASK: C# compiler constants cannot be set to explicit values:
//#if _MyType == "WindowsForms"
//			   If Not addedHandler Then
//					SyncLock addedHandlerLockObject
//						If Not addedHandler Then
//							AddHandler My.Application.Shutdown, AddressOf AutoSaveSettings
//							addedHandler = true
//						End If
//					End SyncLock
//				End If
//#endif
					return defaultInstance;
				}
			}

			[global::System.Configuration.UserScopedSettingAttribute(), global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.Configuration.DefaultSettingValueAttribute("")]
			public string DATAFOLDER
			{
				get
				{
					return Convert.ToString(this["DATAFOLDER"]);
				}
				set
				{
					this["DATAFOLDER"] = value;
				}
			}

			[global::System.Configuration.UserScopedSettingAttribute(), global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.Configuration.DefaultSettingValueAttribute("")]
			public string LANGDLL
			{
				get
				{
					return Convert.ToString(this["LANGDLL"]);
				}
				set
				{
					this["LANGDLL"] = value;
				}
			}

			[global::System.Configuration.UserScopedSettingAttribute(), global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.Configuration.DefaultSettingValueAttribute("")]
			public string LANGX1DLL
			{
				get
				{
					return Convert.ToString(this["LANGX1DLL"]);
				}
				set
				{
					this["LANGX1DLL"] = value;
				}
			}
		}
	}

//INSTANT C# NOTE: This block was only required to support 'My.Settings' in VB. 'Properties.Settings' is used in C#:
//Namespace My
//
//	<Microsoft.VisualBasic.HideModuleNameAttribute(), global::System.Diagnostics.DebuggerNonUserCodeAttribute(), global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()> Friend Module MySettingsProperty
//
//		<global::System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")> Friend ReadOnly Property Settings() As SLPLoader.My.MySettings
//			Get
//				return SLPLoader.My.MySettings.Default
//			End Get
//		End Property
//	End Module
//End Namespace

}